可行技术方案
 前端:使用QT做跨平台的图形界面,包括用户注册、登录、聊天窗口等模块。
后端:使用C++ socket API绑定端口监听连接,每个连接启动一个线程进行处理。使用epoll/select实现IO多路复用。
通信:定义一个自定义的二进制协议,包含了不同类型的消息格式,如登录、聊天、用户列表等。每个消息包含消息类型、长度和消息体。
struct Message {
  int type; // 消息类型
  int length; // 消息长度
  char* body; // 消息体
};
多线程:一个线程监听连接,一个线程轮询epoll事件,其余每个socket一个线程收发数据。可以使用线程池优化。（可搞可不搞）
数据库:使用MySQL存储用户账号信息、消息记录等,使用MySQL C API进行访问。
平台:部署在Linux Server上。
事例：
struct LoginBody {
  char username[64];
  char password[64];
}
登录功能：用户输入账号和密码，客户端组装成数据发给服务器，服务器收到请求，判断为登录数据，组装查询语句，返回查询结果，后端返回前端登陆是否成功，报错信息等相应数据，前端接受数据并作出相应判断。